/* Design rules applied

   In Cassandra

   (1) You build models based on your queries, not your data. 
       If you need to find items based by tag, then you make another table for that and duplicate the data.

   (2) Cassandra presume data space storage is cheap 
       Duplicate your data to meet your queries. 
       The Write action is fast, and writing the same data many many times is normally fine.

   (3) If your rows are skinny, something must be wrong in your data modeling design.
       The objectives is to be able to get the most of search capability 
       while storing as much columns in one row

   (4) In cql, you cannot add dynamically a column.  You should use compound keys to simulate
       column creation.

   (5) Querying a composite key table brings its constraints:
       every query, needs to specify the composite key values.


   Note1: A quick view in cassandra-cli, will give more understanding on the storage per rows

   Note2: 
          cqlsh> source '/var/www/cassandra/...cqlsh' 
          OR
          csqlsh --file ...

   Note3: What is slicing:
          select ... WHERE a=0 AND (b,c,d) > (1,3,4);

   References:
          http://www.slideshare.net/yukim/cql3-in-depth
             Interesting CQL3 Slide.

*/

USE mysite;

// Concept1 is in relation 0..* with Concept2

DROP TABLE IF EXISTS Concept1;

// --------------------------------------------------------------------------------------
//
//   Query table
//
CREATE TABLE Concept1 (

   partitionKey1 varchar,
   partitionKey2 int,

   clusterKey1   text,  
     
   normalField1  text,
   normalSet1    set<text>,    // A set<> does not scale, it is best to denormalize

   PRIMARY KEY ((partitionKey1, partitionKey2), clusterKey1)  
);

// --------------------------------------------------------------------------------------
// USE CASE: insert a row

INSERT INTO Concept1 (partitionKey1, partitionKey2, clusterKey1, normalField1, normalSet1)
VALUES (
   'partitionVal1', 
   2, 
   'clusterVal1',                    
   'This is a comment', 
   { 'item1', 'item2', 'item3' } 
);

INSERT INTO Concept1 (partitionKey1, partitionKey2, clusterKey1, normalField1, normalSet1)
VALUES (
   'partitionVal2', 
   2, 
   'clusterVal2',                     
   'This is a comment', 
   { 'item1', 'item2', 'item3' } 
);

// Use case: list everything for debugging purpose
SELECT * FROM mysite.Concept1;


// --------------------------------------------------------------------------------------
// USE CASE: searching a Concept1 having a value in normalSet1
// This work.
// But it is not considered a good design.  It is mentionned some places
// that it does not scale correctly accross nodes

// SOLUTION #1: Create an index on the set

SELECT * FROM mysite.Concept1
WHERE partitionKey1='partitionVal1' 
   AND partitionKey2=2
   AND clusterKey1='clusterVal1';  // CONTAINS can only be used on an index column

// Before using CONTAINS, you must index the collection.... by
CREATE INDEX ON mysite.Concept1(normalSet1);

// Otherwise the CONTAINS will show an error with: ..."No indexed columns present in by-columns"...
SELECT * FROM mysite.Concept1
WHERE partitionKey1='partitionVal1' 
   AND partitionKey2=2
   AND clusterKey1='clusterVal1'
   AND normalSet1 CONTAINS 'item3';

// 
// The bad news is, by executing in cassandra-cli these:

// [default@mysite] list Concept1;
// Using default limit of 100
// Using default cell limit of 100
// -------------------
// RowKey: partitionVal2:2
// UUID should be 16 or 0 bytes (11)
// [default@mysite]

// which means you do not see how rows are sparse accross the database.


// SOLUTION #2: Create another table to optimize query

DROP TABLE IF EXISTS QueryTableConcept1;
CREATE TABLE QueryTableConcept1 (
   eachItemInNormalSet1     text,
   partitionKey1            text,              // We must use Concept1.(PRIMARY KEY)s
   partitionKey2            int,               // ...
   clusterKey1              text,              // ...
   normalField1             text,              // Duplication of Concept1.normalField1
   PRIMARY KEY (eachItemInNormalSet1, partitionKey1, partitionKey2, clusterKey1 )     
);

// Anytime we wich to insert a new row in the Concept1, we must also do it for this QueryTable:

INSERT INTO Concept1 (partitionKey1, partitionKey2, clusterKey1, normalField1, normalSet1)
VALUES (
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment', 
   { 'item5', 'item6', 'item11' } 
);
INSERT INTO QueryTableConcept1(
   eachItemInNormalSet1,
   partitionKey1, 
   partitionKey2, 
   clusterKey1, 
   normalField1
) VALUES (
   'item5',
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment'
);
INSERT INTO QueryTableConcept1(
   eachItemInNormalSet1,
   partitionKey1, 
   partitionKey2, 
   clusterKey1, 
   normalField1
) VALUES (
   'item6',
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment'
);
INSERT INTO QueryTableConcept1(
   eachItemInNormalSet1,
   partitionKey1, 
   partitionKey2, 
   clusterKey1, 
   normalField1
) VALUES (
   'item11',
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment'
);


// USE CASE: adding a new value to the set

UPDATE Concept1 
SET normalSet1 = normalSet1 + { 'item44' }
WHERE 
   partitionKey1='partitionVal4'
   AND partitionKey2=2
   AND clusterKey1='clusterVal1';

INSERT INTO QueryTableConcept1(
   eachItemInNormalSet1,
   partitionKey1, 
   partitionKey2, 
   clusterKey1, 
   normalField1
) VALUES (
   'item44',
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment'
);


// USE CASE: adding an already existing value to the set

UPDATE Concept1 
SET normalSet1 = normalSet1 + { 'item44' }
WHERE 
   partitionKey1='partitionVal4'
   AND partitionKey2=2
   AND clusterKey1='clusterVal1';

select * from Concept1;


// It has no effect, as it is supposed

INSERT INTO QueryTableConcept1(
   eachItemInNormalSet1,
   partitionKey1, 
   partitionKey2, 
   clusterKey1, 
   normalField1
) VALUES (
   'item44',
   'partitionVal4', 
   2, 
   'clusterVal1',                    
   'This is a comment'
);

select * from QueryTableConcept1;


// USE CASE: rename of partitionKey1
// If we try to rename a key with an existing key, what will happen to the previous data

UPDATE Concept1 
SET partitionKey1='partitionVal6'
WHERE 
   partitionKey1='partitionVal4'
   AND partitionKey2=2
   AND clusterKey1='clusterVal1';

// Not working, kind of logical, This cannot be done.

select * from Concept1;

// Use case: removing 





